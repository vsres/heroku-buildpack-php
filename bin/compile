#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# config
S3_BUCKET=plemi-heroku

APACHE_VERSION="2.2.23"
PHP_VERSION="5.4.7"
LIBMCRYPT_VERSION="2.5.8"
ICU_VERSION="49.1.2"

APC_VERSION="3.1.10"
PHPREDIS_VERSION="2.2.2"
INTL_VERSION="2.0.1"
MONGO_VERSION="1.2.12"

APACHE_S3URL="https://plemi-heroku.s3.amazonaws.com/apache-${APACHE_VERSION}.tar.gz"
LIBMCRYPT_S3URL="https://plemi-heroku.s3.amazonaws.com/libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
ICU_S3URL="https://plemi-heroku.s3.amazonaws.com/icu-${ICU_VERSION}.tar.gz"
COMPOSER_URL="http://getcomposer.org/composer.phar"

BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR $BUILD_DIR/local

cd $BUILD_DIR


# download and extract apache
echo "+ Downloading and extracting apache..."
curl -L $APACHE_S3URL -o - | tar xz -C ${BUILD_DIR}/local

# update path for apache
export PATH=/app/local/apache/bin:$PATH

pushd $BUILD_DIR

# download and extract libmcrypt
echo "+ Downloading and extracting libmcrypt..."
curl -L $LIBMCRYPT_S3URL -o - | tar xz -C ${BUILD_DIR}/local


# download and extract icu
echo "+ Downloading and extracting icu..."
curl -L $ICU_S3URL -o - | tar xz -C ${BUILD_DIR}/local


#
cd ${BUILD_DIR}/local
echo "ls BUILD_DIR/local"
ls -al
#



# make a temp directory
tempdir="$( mktemp -t php_XXXX )"
rm -rf $tempdir
mkdir -p $tempdir
pushd $tempdir

#fetch php, extract, install
echo "+ Downloading and extracting PHP sources..."
#curl -L http://us.php.net/get/php-$PHP_VERSION.tar.bz2/from/www.php.net/mirror -o - | tar xj
curl -L http://mirrors.sohu.com/php/php-5.3.29.tar.bz2 -o - | tar xj
pushd php-5.3.29

echo "+ Configuring PHP..."
# new configure command
./configure \
--prefix=${BUILD_DIR}/local/php \
--with-config-file-path=${BUILD_DIR}/local/php \
--with-config-file-scan-dir=${BUILD_DIR}/local/php/etc.d \
--disable-debug \
--disable-rpath \
--enable-fpm \
--enable-gd-native-ttf \
--enable-inline-optimization \
--enable-libxml \
--enable-mbregex \
--enable-mbstring \
--enable-pcntl \
--enable-soap \
--enable-zip \
--without-pear \
--with-bz2 \
--with-curl \
--with-gd \
--with-gettext \
--with-jpeg-dir \
--with-mcrypt=${BUILD_DIR}/local/libmcrypt-$LIBMCRYPT_VERSION \
--with-apxs2=${BUILD_DIR}/local/apache/bin/apxs \
--with-iconv \
--with-mhash \
--with-openssl \
--with-pcre-regex \
--with-pgsql \
--with-pdo-pgsql \
--with-png-dir \
--with-zlib

echo "+ Compiling PHP..."
make install
# update path for PHP
export PATH=/app/local/php/bin:$PATH

pushd $BUILD_DIR/local

echo "+ Installing apc..."
# download and install apc from source
curl -L http://pecl.php.net/get/APC-${APC_VERSION}.tgz -o - | tar xz
pushd APC-${APC_VERSION}
# php apc jokers didn't update the version string in 3.1.10.
sed -i 's/PHP_APC_VERSION "3.1.9"/PHP_APC_VERSION "3.1.10"/g' php_apc.h
phpize
./configure --enable-apc --enable-apc-filehits
make && make install

popd


echo "+ Installing phpredis..."
# download and install phpredis from source
curl -L "https://github.com/nicolasff/phpredis/tarball/2.2.2" -o - | tar xz
find . -name 'nicolas*' -exec mv {} phpredis-${PHPREDIS_VERSION} \; 2> /dev/null

pushd phpredis-${PHPREDIS_VERSION}

phpize
./configure
make && make install

popd


echo "+ Installing intl..."
# download and install apc from source
curl -L http://pecl.php.net/get/intl-${INTL_VERSION}.tgz -o - | tar xz
pushd intl-${INTL_VERSION}

phpize
./configure --enable-intl --with-icu-dir=$BUILD_DIR/local/icu-${ICU_VERSION}
make && make install

popd


echo "+ Installing mongo..."
# download and install apc from source
curl -L http://pecl.php.net/get/mongo-${MONGO_VERSION}.tgz -o - | tar xz
pushd mongo-${MONGO_VERSION}

phpize
./configure
make && make install

popd


echo "+ Copying config files..."
# update config files
cp $LP_DIR/conf/httpd.conf ${BUILD_DIR}/local/apache/conf
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/local/php/php.ini
cp -a $LP_DIR/conf/etc.d ${BUILD_DIR}/local/php/

cd $BUILD_DIR


echo "+ Creating boot script for Procfile..."
if [ ! -f boot.sh ]; then
  cat > boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/local/apache/conf/httpd.conf;
done
touch /app/local/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/local/apache/logs/error_log &
tail -F /app/local/apache/logs/access_log &
echo "Launching apache"
exec /app/local/apache/bin/httpd -DNO_DETACH
EOF
fi

chmod +x boot.sh

# clean the cache
echo "$CACHE_DIR"
# rm -rf $CACHE_DIR/*
